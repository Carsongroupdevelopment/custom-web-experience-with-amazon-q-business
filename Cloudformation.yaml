AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation for the blog on GenAI with QBusiness'
Parameters:
  
  LatestAmiId:
    Description: EC2 machine image
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  VpcId:
    Description: ID of the existing VPC
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: must be the ID of an existing VPC  
  PublicSubnetIds:
    Description: List of IDs of existing public subnets
    Type: List<AWS::EC2::Subnet::Id>
    ConstraintDescription: must be list of existing public subnet IDs  
  CertificateARN:
    Description: Certificate that needs to be added to the Load Balancer
    Type: String
  AuthName:
    Type: String
    Description: Unique Auth Name for Cognito Resources
    AllowedPattern: ^[a-z0-9]+$
    ConstraintDescription: May only include lowercase, alphanumeric characters
  QApplicationId:
    Type: String
    Description: Q Application Id
  IdcApplicationArn:
    Type: String
    Description: Identity Center customer application ARN.
    Default: ""
    
Resources:
  QManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowQfunctions
          Effect: Allow
          Action:
          - "qbusiness:ChatSync"
          Resource: "*"
        
  QServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: QcustomwebUIRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS:
            - !Sub arn:aws:iam::${AWS::AccountId}:root
          Action:
          - sts:AssumeRole
          - sts:SetContext
          Condition:
            ArnEquals:
              "aws:PrincipalArn": !GetAtt EC2ServiceRole.Arn
      Path: /
      ManagedPolicyArns:
      - !Ref QManagedPolicy
  
  EC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole    
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  
  EC2ServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref EC2ServiceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowAssumeQRole
          Effect: Allow
          Action:
          - "sts:AssumeRole"
          - "sts:SetContext"
          Resource: !GetAtt QServiceRole.Arn
        - Sid: AllowTokenExchange
          Effect: Allow
          Action:
            - sso-oauth:CreateTokenWithIAM
          Resource: "*"
        - Sid: AllowAppConfig
          Effect: Allow
          Action:
            - "appconfig:StartConfigurationSession"
            - "appconfig:GetLatestConfiguration"
          Resource: "*"

  AppConfig:
    Type: AWS::AppConfig::Application
    Properties:
      Name: qcustomwebui
  
  AppConfigEnvironment:
    Type: AWS::AppConfig::Environment
    Properties:
      ApplicationId: !Ref AppConfig
      Name: qcustomwebui-env
  
  AppConfigConfigProfile:
    Type: AWS::AppConfig::ConfigurationProfile
    Properties:
      ApplicationId: !Ref AppConfig
      Name: qcustomwebui-config
      LocationUri: "hosted"
  
  AppConfigConfigVersion:
    Type: AWS::AppConfig::HostedConfigurationVersion
    Properties:
      ApplicationId: !Ref AppConfig
      ConfigurationProfileId: !Ref AppConfigConfigProfile
      ContentType: "application/json"
      Content: !Sub |
        {
          "AmazonQAppId": "${QApplicationId}",
          "IamRoleArn": "${QServiceRole.Arn}",
          "Region": "${AWS::Region}",
          "IdcApplicationArn": "${IdcApplicationArn}",
          "OAuthConfig": {
            "ClientId": "${UserPoolClient}",
            "ExternalDns": "${LowerCaseFqdn.Output}",
            "CognitoDomain" : "${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
          }
        }
  AppConfigDeployment:
    Type: AWS::AppConfig::Deployment
    Properties:
      ApplicationId: !Ref AppConfig
      ConfigurationProfileId: !Ref AppConfigConfigProfile
      ConfigurationVersion: !GetAtt AppConfigConfigVersion.VersionNumber
      EnvironmentId: !Ref AppConfigEnvironment
      DeploymentStrategyId: !Ref AppConfigDeploymentStrategy
  
  AppConfigDeploymentStrategy:
    Type: AWS::AppConfig::DeploymentStrategy
    Properties:
      DeploymentDurationInMinutes: 0
      FinalBakeTimeInMinutes: 0
      GrowthFactor: 100
      Name: "Quick deployment"
      ReplicateTo: "NONE"
      GrowthType: "LINEAR"
  # EC2 and ALB Security Groups
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ELBSecurityGroupSelfReferenceEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outbound traffic to EC2 Instance
      GroupId: !Ref ELBSecurityGroup
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      DestinationSecurityGroupId: !Ref SecurityGroup

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security group
      VpcId: !Ref VpcId  
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ELBSecurityGroup
          - GroupId

  SecurityGroupSelfReferenceEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow all outbound traffic
      GroupId: !GetAtt [SecurityGroup, GroupId]
      IpProtocol: "-1"
      CidrIp: 0.0.0.0/0

  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref EC2ServiceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Select [0, !Ref PublicSubnetIds]
      SecurityGroupIds:
      - Ref: SecurityGroup
      ImageId: !Ref 'LatestAmiId'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf -y install python3.11 python3.11-pip git
          dnf -y install https://s3.amazonaws.com/aws-appconfig-downloads/aws-appconfig-agent/linux/x86_64/latest/aws-appconfig-agent.rpm
          mkdir /etc/systemd/system/aws-appconfig-agent.service.d
          echo "[Service]" > /etc/systemd/system/aws-appconfig-agent.service.d/overrides.conf 
          echo "Environment=SERVICE_REGION=${AWS::Region}" >> /etc/systemd/system/aws-appconfig-agent.service.d/overrides.conf
          systemctl daemon-reload
          systemctl enable aws-appconfig-agent
          systemctl restart aws-appconfig-agent
          cd /opt
          git clone git clone https://github.com/aws-samples/custom-web-experience-with-amazon-q-business.git
          cd custom-web-experience-with-amazon-q-business/
          pip3.11 install virtualenv
          python3.11 -m virtualenv venv
          venv/bin/pip install -r requirements.txt
          APPCONFIG_APP_NAME=${AppConfig} APPCONFIG_ENV_NAME=${AppConfigEnvironment} APPCONFIG_CONF_NAME=${AppConfigConfigProfile} nohup venv/bin/streamlit run core/cognito.py --server.port=8080 > logs.txt &
      Tags:
      - Key: Name
        Value: ec2-q-client

    # Target Group, Listener and Application  Load Balancer
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref EC2Instance
        Port: 8080
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId

  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Sub ${AuthName}-user-pool
      AutoVerifiedAttributes:
      - email
      MfaConfiguration: "OFF"
      Schema:
      - Name: email
        AttributeDataType: String
        Mutable: false
        Required: true

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${AuthName}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
      - code
      AllowedOAuthScopes:
      - openid
      SupportedIdentityProviders:
      - COGNITO
      CallbackURLs:
      - !Sub "https://${LowerCaseFqdn.Output}/component/streamlit_oauth.authorize_button/index.html"

  UserPoolDomain:
    Type: "AWS::Cognito::UserPoolDomain"
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub ${AuthName}-dns-testname

  ALBListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref CertificateARN
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref EC2TargetGroup
        Order: 1
  
  ALBListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Order: 1
          RedirectConfig: 
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
          Type: "redirect"

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !Select [0, !Ref PublicSubnetIds]
      - !Select [1, !Ref PublicSubnetIds]
      SecurityGroups:
      - !Ref ELBSecurityGroup
  
  LowerCaseFqdn:
    Type: Custom::LowerCaseFqdn
    Properties:
      ServiceToken: !GetAtt LowerCaseFunction.Arn
      Input: !GetAtt ApplicationLoadBalancer.DNSName

  LowerCaseFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LowerCaseRole.Arn
      Code:
        ZipFile: |
          import cfnresponse
          def error_handler(func):
            def wrapper(*args, **kwargs):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    logger.error(e)
                    cfnresponse.send(args[0], args[1], cfnresponse.FAILED, {})
                    return None
            return wrapper

          @error_handler
          def handler(event, context):
            if event["RequestType"] in ["Create", "Update"]:
              response = {}
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"Output": event['ResourceProperties']['Input'].lower()})
            if event["RequestType"] == "Delete":
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.12
      Timeout: 60
  
  LowerCaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

Outputs:
  QServiceRoleNameArn:
    Description: Name of Q Role with ARN FN tag
    Value:
      Fn::GetAtt: [QServiceRole, Arn]
  URL:
    Description: URL to access the Streamlit APP
    Value:
      !Sub https://${ApplicationLoadBalancer.DNSName}
  TrustedIssuerUrl:
    Description: Endpoint of the trusted issuer to setup Identity Center
    Value: !GetAtt UserPool.ProviderURL
  Audience:
    Description: Audience to setup customer application in Identity Center
    Value: !Ref UserPoolClient
  RoleArn:
    Description: "ARN of the IAM role required to setup token exchange in Identity Center"
    Value: !GetAtt EC2ServiceRole.Arn
